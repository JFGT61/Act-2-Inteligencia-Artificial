# -*- coding: utf-8 -*-
"""Act 2 IA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WoDTFEslGTnKsW8_phXWChPkRTZBTGit
"""

import heapq

class Grafo:
    def __init__(self):
        self.vertices = {}

    def agregar_vertice(self, vertice):
        self.vertices[vertice] = {}

    def agregar_arista(self, origen, destino, peso):
        self.vertices[origen][destino] = peso
        self.vertices[destino][origen] = peso

    def obtener_vecinos(self, vertice):
        return self.vertices[vertice]

class SistemaTransporte:
    def __init__(self, grafo):
        self.grafo = grafo

    def encontrar_ruta(self, origen, destino):
        cola_prioridad = []
        heapq.heappush(cola_prioridad, (0, origen))
        visitados = set()
        padres = {}
        distancias = {vertice: float('inf') for vertice in self.grafo.vertices}
        distancias[origen] = 0

        while cola_prioridad:
            distancia_actual, vertice_actual = heapq.heappop(cola_prioridad)

            if vertice_actual == destino:
                ruta_optima = []
                while vertice_actual in padres:
                    ruta_optima.append(vertice_actual)
                    vertice_actual = padres[vertice_actual]
                ruta_optima.append(origen)
                return ruta_optima[::-1]

            if vertice_actual in visitados:
                continue

            visitados.add(vertice_actual)

            for vecino, peso in self.grafo.obtener_vecinos(vertice_actual).items():
                nueva_distancia = distancias[vertice_actual] + peso
                if nueva_distancia < distancias[vecino]:
                    distancias[vecino] = nueva_distancia
                    heapq.heappush(cola_prioridad, (nueva_distancia, vecino))
                    padres[vecino] = vertice_actual

        return None

# Ejemplo de uso
grafo = Grafo()
grafo.agregar_vertice("A")
grafo.agregar_vertice("B")
grafo.agregar_vertice("C")
grafo.agregar_vertice("D")
grafo.agregar_vertice("E")
grafo.agregar_vertice("F")

grafo.agregar_arista("A", "B", 5)
grafo.agregar_arista("B", "C", 3)
grafo.agregar_arista("C", "D", 7)
grafo.agregar_arista("B", "D", 6)
grafo.agregar_arista("A", "D", 10)
grafo.agregar_arista("D", "E", 8)
grafo.agregar_arista("D", "F", 6)
grafo.agregar_arista("B", "F", 12)
grafo.agregar_arista("A", "F", 18)

sistema_transporte = SistemaTransporte(grafo)
Ruta1 = input("Escriba la ruta de inicio ")
Ruta2 = input("Escriba la ruta de destino ")
ruta_optima = sistema_transporte.encontrar_ruta(Ruta1,Ruta2)
if ruta_optima:
    print("La ruta óptima es:", ruta_optima)
else:
    print("No se encontró una ruta entre los puntos especificados.")